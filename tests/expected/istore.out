CREATE EXTENSION clickhouse_fdw;
CREATE EXTENSION istore;
CREATE SERVER ch_default FOREIGN DATA WRAPPER clickhouse_fdw OPTIONS(dbname 'regression');
CREATE USER MAPPING FOR CURRENT_USER SERVER ch_default;
-- create remote table
SELECT clickhousedb_raw_query('DROP DATABASE IF EXISTS regression');
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('CREATE DATABASE regression');
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('
	CREATE TABLE regression.t2 (`dt` Date, id Int32, `a_keys` Array(Int32), `a_values` Array(Int32))
	ENGINE = MergeTree()
	PARTITION BY dt
	ORDER BY (dt, id)
	SETTINGS index_granularity = 8192');
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('INSERT INTO regression.t2
	VALUES (''2019-10-10'', 1, [1,2,3], [11, 22, 33])');
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('INSERT INTO regression.t2
	VALUES (''2019-10-10'', 2, [1,2,3,4], [11,22, 33,44])');
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('INSERT INTO regression.t2
	VALUES (''2019-10-11'', 3, [3,4,5], [33, 44, 55])');
 clickhousedb_raw_query 
------------------------
 
(1 row)

-- without sign
CREATE FOREIGN TABLE t2 (dt date NOT NULL, id int, a istore) SERVER ch_default;
-- default sign
SELECT clickhousedb_raw_query('
	CREATE TABLE regression.t3(`dt` Date, id Int32, `a_keys` Array(Int32),
		`a_values` Array(Int32), `sign` Int8)
	ENGINE = CollapsingMergeTree(sign)
	PARTITION BY dt
	ORDER BY (dt, a_keys)
	SETTINGS index_granularity = 8192');
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('INSERT INTO regression.t3
	VALUES (''2019-10-10'', 1, [1,2,3], [11, 22, 33], 1)');
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('INSERT INTO regression.t3
	VALUES (''2019-10-11'', 2, [3,4,5], [33, 44, 55], 1)');
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('INSERT INTO regression.t3
	VALUES (''2019-10-11'', 2, [3,4,5], [33, 44, 55], -1)');
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('INSERT INTO regression.t3
	VALUES (''2019-10-11'', 3, [3,4,5], [33, 44, 66], 1)');
 clickhousedb_raw_query 
------------------------
 
(1 row)

CREATE FOREIGN TABLE t3 (dt date NOT NULL, id int, a istore) SERVER ch_default
	OPTIONS (table_name 't3', engine 'CollapsingMergeTree');
-- custom sign
SELECT clickhousedb_raw_query('CREATE TABLE regression.t4
		(`dt` Date, `id` Int32, `a_keys` Array(Int32), `a_values` Array(Int32), `Sign` Int8)
		ENGINE = CollapsingMergeTree(Sign)
		PARTITION BY dt
		ORDER BY (dt, a_keys) SETTINGS index_granularity = 8192');
 clickhousedb_raw_query 
------------------------
 
(1 row)

CREATE FOREIGN TABLE t4 (dt date NOT NULL, id int, a istore) SERVER ch_default
	OPTIONS (engine 'CollapsingMergeTree(Sign)');
SELECT clickhousedb_raw_query('INSERT INTO regression.t4 VALUES (''2019-10-10'', 1, [1,2,3], [11, 22, 33], 1)');
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('INSERT INTO regression.t4 VALUES (''2019-10-10'', 1, [1,2,3], [11, 22, 33], -1)');
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('INSERT INTO regression.t4 VALUES (''2019-10-10'', 2, [1,2,3,4], [11,22, 33,44], 1)');
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('INSERT INTO regression.t4 VALUES (''2019-10-11'', 3, [3,4,5], [33, 44, 55], 1)');
 clickhousedb_raw_query 
------------------------
 
(1 row)

-- check all good
EXPLAIN (VERBOSE) SELECT * FROM t2 ORDER BY dt;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.t2  (cost=1.00..-0.50 rows=1 width=40)
   Output: dt, id, a
   Remote SQL: SELECT dt, id, (a_keys,a_values) FROM regression.t2 ORDER BY dt ASC
(3 rows)

SELECT * FROM t2 ORDER BY id;
     dt     | id |                     a                      
------------+----+--------------------------------------------
 10-10-2019 |  1 | "1"=>"11", "2"=>"22", "3"=>"33"
 10-10-2019 |  2 | "1"=>"11", "2"=>"22", "3"=>"33", "4"=>"44"
 10-11-2019 |  3 | "3"=>"33", "4"=>"44", "5"=>"55"
(3 rows)

EXPLAIN (VERBOSE) SELECT dt, sum(a) FROM t2 GROUP BY dt ORDER BY dt;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Sort  (cost=-0.89..-0.89 rows=1 width=36)
   Output: dt, (sum(a))
   Sort Key: t2.dt
   ->  Foreign Scan  (cost=1.00..-0.90 rows=1 width=36)
         Output: dt, (sum(a))
         Relations: Aggregate on (t2)
         Remote SQL: SELECT dt, sumMap(a_keys,a_values) FROM regression.t2 GROUP BY dt
(7 rows)

SELECT dt, sum(a) FROM t2 GROUP BY dt ORDER BY dt;
     dt     |                    sum                     
------------+--------------------------------------------
 10-10-2019 | "1"=>"22", "2"=>"44", "3"=>"66", "4"=>"44"
 10-11-2019 | "3"=>"33", "4"=>"44", "5"=>"55"
(2 rows)

EXPLAIN (VERBOSE) SELECT dt, sum(a->1) FROM t2 GROUP BY dt ORDER BY dt;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=-0.89..-0.89 rows=1 width=12)
   Output: dt, (sum((a -> 1)))
   Sort Key: t2.dt
   ->  Foreign Scan  (cost=1.00..-0.90 rows=1 width=12)
         Output: dt, (sum((a -> 1)))
         Relations: Aggregate on (t2)
         Remote SQL: SELECT dt, sum(a_values[indexOf(a_keys,1)]) FROM regression.t2 GROUP BY dt
(7 rows)

SELECT dt, sum(a->1) FROM t2 GROUP BY dt ORDER BY dt;
     dt     | sum 
------------+-----
 10-10-2019 |  22
 10-11-2019 |   0
(2 rows)

EXPLAIN (VERBOSE) SELECT dt, sum(a) FROM t3 GROUP BY dt ORDER BY dt;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Sort  (cost=-0.89..-0.89 rows=1 width=36)
   Output: dt, (sum(a))
   Sort Key: t3.dt
   ->  Foreign Scan  (cost=1.00..-0.90 rows=1 width=36)
         Output: dt, (sum(a))
         Relations: Aggregate on (t3)
         Remote SQL: SELECT dt, sumMap(a_keys,arrayMap(x -> x * sign,a_values)) FROM regression.t3 GROUP BY dt
(7 rows)

SELECT dt, sum(a) FROM t3 GROUP BY dt ORDER BY dt;
     dt     |               sum               
------------+---------------------------------
 10-10-2019 | "1"=>"11", "2"=>"22", "3"=>"33"
 10-11-2019 | "3"=>"33", "4"=>"44", "5"=>"66"
(2 rows)

EXPLAIN (VERBOSE) SELECT dt, sum(a) FROM t4 GROUP BY dt ORDER BY dt;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Sort  (cost=-0.89..-0.89 rows=1 width=36)
   Output: dt, (sum(a))
   Sort Key: t4.dt
   ->  Foreign Scan  (cost=1.00..-0.90 rows=1 width=36)
         Output: dt, (sum(a))
         Relations: Aggregate on (t4)
         Remote SQL: SELECT dt, sumMap(a_keys,arrayMap(x -> x * Sign,a_values)) FROM regression.t4 GROUP BY dt
(7 rows)

SELECT dt, sum(a) FROM t4 GROUP BY dt ORDER BY dt;
     dt     |                    sum                     
------------+--------------------------------------------
 10-10-2019 | "1"=>"11", "2"=>"22", "3"=>"33", "4"=>"44"
 10-11-2019 | "3"=>"33", "4"=>"44", "5"=>"55"
(2 rows)

-- aggregations with signs on builtin columns
SELECT clickhousedb_raw_query('
	CREATE TABLE regression.t5 (dt Date, key Int32, val Int32, `Sign` Int8)
	engine = CollapsingMergeTree(Sign)
	order by (dt, key) partition by dt settings index_granularity = 8192;'
);
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('insert into regression.t5 select ''2010-10-10'', number, number, 1 from numbers(10);');
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('insert into regression.t5 select ''2010-10-10'', number, number, -1 from numbers(5);');
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('insert into regression.t5 select ''2010-10-11'', number, number, 1 from numbers(10);');
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('insert into regression.t5 select ''2010-10-11'', number, number, -1 from numbers(5);');
 clickhousedb_raw_query 
------------------------
 
(1 row)

CREATE FOREIGN TABLE t5 (dt date NOT NULL, key int, val int)
SERVER ch_default OPTIONS (table_name 't5', engine 'CollapsingMergeTree(Sign)');
EXPLAIN (VERBOSE) SELECT sum(val) FROM t5;
                       QUERY PLAN                        
---------------------------------------------------------
 Foreign Scan  (cost=1.00..-0.90 rows=1 width=8)
   Output: (sum(val))
   Relations: Aggregate on (t5)
   Remote SQL: SELECT sum(val * Sign) FROM regression.t5
(4 rows)

SELECT sum(val) FROM t5;
 sum 
-----
  70
(1 row)

EXPLAIN (VERBOSE) SELECT sum(val + 10) FROM t5;
                           QUERY PLAN                           
----------------------------------------------------------------
 Foreign Scan  (cost=1.00..-0.90 rows=1 width=8)
   Output: (sum((val + 10)))
   Relations: Aggregate on (t5)
   Remote SQL: SELECT sum((val + 10) * Sign) FROM regression.t5
(4 rows)

SELECT sum(val + 10) FROM t5;
 sum 
-----
 170
(1 row)

EXPLAIN (VERBOSE) SELECT sum(val) FILTER (WHERE val > 6) FROM t5;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan  (cost=1.00..-0.90 rows=1 width=8)
   Output: (sum(val) FILTER (WHERE (val > 6)))
   Relations: Aggregate on (t5)
   Remote SQL: SELECT sumIf(val * Sign,(val > 6)) FROM regression.t5
(4 rows)

SELECT sum(val) FILTER (WHERE val > 6) FROM t5;
 sum 
-----
  48
(1 row)

EXPLAIN (VERBOSE) SELECT count(*) FROM t5;
                    QUERY PLAN                     
---------------------------------------------------
 Foreign Scan  (cost=1.00..-0.90 rows=1 width=8)
   Output: (count(*))
   Relations: Aggregate on (t5)
   Remote SQL: SELECT sum(Sign) FROM regression.t5
(4 rows)

SELECT count(*) FROM t5;
 count 
-------
    10
(1 row)

EXPLAIN (VERBOSE) SELECT count(val) FROM t5;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan  (cost=1.00..-0.90 rows=1 width=8)
   Output: (count(val))
   Relations: Aggregate on (t5)
   Remote SQL: SELECT sumIf(Sign,(val) IS NOT NULL) FROM regression.t5
(4 rows)

SELECT count(val) FROM t5;
 count 
-------
    10
(1 row)

EXPLAIN (VERBOSE) SELECT count(val + 10) FROM t5;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..-0.90 rows=1 width=8)
   Output: (count((val + 10)))
   Relations: Aggregate on (t5)
   Remote SQL: SELECT sumIf(Sign,((val + 10)) IS NOT NULL) FROM regression.t5
(4 rows)

SELECT count(val + 10) FROM t5;
 count 
-------
    10
(1 row)

EXPLAIN (VERBOSE) SELECT count(val) FILTER (WHERE val > 6) FROM t5;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..-0.90 rows=1 width=8)
   Output: (count(val) FILTER (WHERE (val > 6)))
   Relations: Aggregate on (t5)
   Remote SQL: SELECT sumIf(Sign,(val > 6) AND (val) IS NOT NULL) FROM regression.t5
(4 rows)

SELECT count(val) FILTER (WHERE val > 6) FROM t5;
 count 
-------
     6
(1 row)

EXPLAIN (VERBOSE) SELECT avg(val) FROM t5;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..-0.90 rows=1 width=32)
   Output: (avg(val))
   Relations: Aggregate on (t5)
   Remote SQL: SELECT sum(val * Sign) / sumIf(Sign,val IS NOT NULL) FROM regression.t5
(4 rows)

SELECT avg(val) FROM t5;
 avg 
-----
   7
(1 row)

EXPLAIN (VERBOSE) SELECT avg(val + 10) FROM t5;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..-0.90 rows=1 width=32)
   Output: (avg((val + 10)))
   Relations: Aggregate on (t5)
   Remote SQL: SELECT sum((val + 10) * Sign) / sumIf(Sign,(val + 10) IS NOT NULL) FROM regression.t5
(4 rows)

SELECT avg(val + 10) FROM t5;
 avg 
-----
  17
(1 row)

EXPLAIN (VERBOSE) SELECT avg(val) FILTER (WHERE val > 6) FROM t5;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..-0.90 rows=1 width=32)
   Output: (avg(val) FILTER (WHERE (val > 6)))
   Relations: Aggregate on (t5)
   Remote SQL: SELECT sumIf(val * Sign,(val > 6)) / sumIf(Sign,(val > 6) AND val IS NOT NULL) FROM regression.t5
(4 rows)

SELECT avg(val) FILTER (WHERE val > 6) FROM t5;
 avg 
-----
   8
(1 row)

SELECT clickhousedb_raw_query('DROP DATABASE regression');
 clickhousedb_raw_query 
------------------------
 
(1 row)

DROP USER MAPPING FOR CURRENT_USER SERVER ch_default;
DROP EXTENSION clickhouse_fdw CASCADE;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to server ch_default
drop cascades to foreign table t2
drop cascades to foreign table t3
drop cascades to foreign table t4
drop cascades to foreign table t5
DROP EXTENSION istore CASCADE;
