CREATE EXTENSION clickhouse_fdw;
SET datestyle = 'ISO';
CREATE SERVER loopback FOREIGN DATA WRAPPER clickhouse_fdw
    OPTIONS(dbname 'regression', driver 'binary');
CREATE USER MAPPING FOR CURRENT_USER SERVER loopback;
SELECT clickhousedb_raw_query('DROP DATABASE IF EXISTS regression');
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query('CREATE DATABASE regression');
 clickhousedb_raw_query 
------------------------
 
(1 row)

-- argMax, argMin
SELECT clickhousedb_raw_query($$
	CREATE TABLE regression.t1 (a int, b int, c DateTime) ENGINE = MergeTree ORDER BY (a);
$$);
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query($$
	INSERT INTO regression.t1 VALUES (1, 1, '2019-01-01 10:00:00');
$$);
 clickhousedb_raw_query 
------------------------
 
(1 row)

SELECT clickhousedb_raw_query($$
	INSERT INTO regression.t1 VALUES (2, 2, '2019-01-02 10:00:00');
$$);
 clickhousedb_raw_query 
------------------------
 
(1 row)

CREATE FOREIGN TABLE t1 (a int, b int, c timestamp) SERVER loopback;
CREATE FOREIGN TABLE t2 (a int, b int, c timestamp with time zone) SERVER loopback OPTIONS (table_name 't1');
EXPLAIN (VERBOSE) SELECT argMin(a, b) FROM t1;
                      QUERY PLAN                      
------------------------------------------------------
 Foreign Scan  (cost=1.00..-0.90 rows=1 width=4)
   Output: (argmin(a, (b)::bigint))
   Relations: Aggregate on (t1)
   Remote SQL: SELECT argMin(a, b) FROM regression.t1
(4 rows)

SELECT argMin(a, b) FROM t1;
 argmin 
--------
      1
(1 row)

EXPLAIN (VERBOSE) SELECT argMax(a, b) FROM t1;
                      QUERY PLAN                      
------------------------------------------------------
 Foreign Scan  (cost=1.00..-0.90 rows=1 width=4)
   Output: (argmax(a, (b)::bigint))
   Relations: Aggregate on (t1)
   Remote SQL: SELECT argMax(a, b) FROM regression.t1
(4 rows)

SELECT argMax(a, b) FROM t1;
 argmax 
--------
      2
(1 row)

EXPLAIN (VERBOSE) SELECT argMin(a, c) FROM t1;
                      QUERY PLAN                      
------------------------------------------------------
 Foreign Scan  (cost=1.00..-0.90 rows=1 width=4)
   Output: (argmin(a, c))
   Relations: Aggregate on (t1)
   Remote SQL: SELECT argMin(a, c) FROM regression.t1
(4 rows)

SELECT argMin(a, c) FROM t1;
 argmin 
--------
      1
(1 row)

EXPLAIN (VERBOSE) SELECT argMax(a, c) FROM t1;
                      QUERY PLAN                      
------------------------------------------------------
 Foreign Scan  (cost=1.00..-0.90 rows=1 width=4)
   Output: (argmax(a, c))
   Relations: Aggregate on (t1)
   Remote SQL: SELECT argMax(a, c) FROM regression.t1
(4 rows)

SELECT argMax(a, c) FROM t1;
 argmax 
--------
      2
(1 row)

EXPLAIN (VERBOSE) SELECT date_trunc('day', c at time zone 'UTC') as d1 FROM t1 GROUP BY d1 ORDER BY d1;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=-0.89..-0.89 rows=1 width=8)
   Output: (date_trunc('day'::text, timezone('UTC'::text, c)))
   Sort Key: (date_trunc('day'::text, timezone('UTC'::text, t1.c)))
   ->  Foreign Scan  (cost=1.00..-0.90 rows=1 width=8)
         Output: (date_trunc('day'::text, timezone('UTC'::text, c)))
         Relations: Aggregate on (t1)
         Remote SQL: SELECT toStartOfDay(toTimeZone(c, 'UTC')) FROM regression.t1 GROUP BY (toStartOfDay(toTimeZone(c, 'UTC')))
(7 rows)

SELECT date_trunc('day', c at time zone 'UTC') as d1 FROM t1 GROUP BY d1 ORDER BY d1;
           d1           
------------------------
 2019-01-01 00:00:00-08
 2019-01-02 00:00:00-08
(2 rows)

EXPLAIN (VERBOSE) SELECT date_trunc('day', c at time zone 'UTC') as d1 FROM t2 GROUP BY d1 ORDER BY d1;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=-0.89..-0.89 rows=1 width=8)
   Output: (date_trunc('day'::text, timezone('UTC'::text, c)))
   Sort Key: (date_trunc('day'::text, timezone('UTC'::text, t2.c)))
   ->  Foreign Scan  (cost=1.00..-0.90 rows=1 width=8)
         Output: (date_trunc('day'::text, timezone('UTC'::text, c)))
         Relations: Aggregate on (t2)
         Remote SQL: SELECT toStartOfDay(toTimeZone(c, 'UTC')) FROM regression.t1 GROUP BY (toStartOfDay(toTimeZone(c, 'UTC')))
(7 rows)

SELECT date_trunc('day', c at time zone 'UTC') as d1 FROM t2 GROUP BY d1 ORDER BY d1;
         d1          
---------------------
 2019-01-01 00:00:00
 2019-01-02 00:00:00
(2 rows)

DROP USER MAPPING FOR CURRENT_USER SERVER loopback;
SELECT clickhousedb_raw_query('DROP DATABASE regression');
 clickhousedb_raw_query 
------------------------
 
(1 row)

DROP EXTENSION IF EXISTS clickhouse_fdw CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to server loopback
drop cascades to foreign table t1
drop cascades to foreign table t2
